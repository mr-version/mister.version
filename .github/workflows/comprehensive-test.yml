name: Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Run Unit Tests
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: "**/*.trx"
        
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: "**/coverage.cobertura.xml"

  integration-tests:
    name: Integration Tests  
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Run Integration Tests
      run: |
        export USE_DOTNET=true
        ./test-versioning-scenarios.sh
      
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: "/tmp/test-results.txt"

  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    strategy:
      matrix:
        scenario:
          - basic-versioning
          - monorepo-dependencies
          - prerelease-progression
          - global-vs-project-tags
          - new-release-cycles
          - config-baseversion
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Run Specific Regression Test
      run: |
        export USE_DOTNET=true
        case "${{ matrix.scenario }}" in
          basic-versioning)
            echo "Running basic versioning regression tests..."
            # Run subset of tests focused on basic versioning
            ;;
          monorepo-dependencies)
            echo "Running monorepo dependency regression tests..."
            # Run subset of tests focused on monorepo dependencies
            ;;
          prerelease-progression)
            echo "Running prerelease progression regression tests..."
            # Run subset of tests focused on prerelease progression
            ;;
          global-vs-project-tags)
            echo "Running global vs project tags regression tests..."
            # Run subset of tests focused on tag priority
            ;;
          new-release-cycles)
            echo "Running new release cycle regression tests..."
            # Run subset of tests focused on release cycle detection
            ;;
          config-baseversion)
            echo "Running config baseVersion regression tests..."
            # Run subset of tests focused on configuration handling
            ;;
        esac

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: security-scan-results.sarif

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run Performance Tests
      run: |
        echo "Creating large monorepo for performance testing..."
        export USE_DOTNET=true
        export TEST_DIR=/tmp/perf-test
        mkdir -p $TEST_DIR/large-monorepo
        cd $TEST_DIR/large-monorepo
        
        # Initialize git
        git init
        git config user.email "test@example.com"
        git config user.name "Test User"
        
        # Create 50 projects to test performance
        for i in {1..50}; do
          mkdir -p "src/Project$i"
          cat > "src/Project$i/Project$i.csproj" << EOF
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <TargetFramework>net8.0</TargetFramework>
          </PropertyGroup>
        </Project>
        EOF
          echo "namespace Project$i { public class Class$i { } }" > "src/Project$i/Class$i.cs"
        done
        
        git add .
        git commit -m "Initial large monorepo"
        git tag v1.0.0
        
        # Test version calculation performance
        echo "Testing performance with 50 projects..."
        time dotnet "$GITHUB_WORKSPACE/Mister.Version.CLI/bin/Debug/net8.0/mr-version.dll" report --repo . --include-dependencies

  comprehensive-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, regression-tests, performance-test]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate comprehensive test report
      run: |
        echo "# Comprehensive Test Report" > test-report.md
        echo "" >> test-report.md
        echo "## Summary" >> test-report.md
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> test-report.md
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> test-report.md  
        echo "- **Regression Tests**: ${{ needs.regression-tests.result }}" >> test-report.md
        echo "- **Performance Tests**: ${{ needs.performance-test.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Detailed Results" >> test-report.md
        echo "See individual job artifacts for detailed test results." >> test-report.md
        
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-report.md